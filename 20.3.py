import func

def a(n):
    return map(lambda x: (x*x*x)%n, range(1,n))

if __name__ == '__main__':

    print(a(5))
    print(a(7))
    print(a(11))
    print(a(13))

 # 1= 1^3(mod 5)
 # 3= 2^3(mod 5)
 # 2= 3^3(mod 5)
 # 4= 4^3(mod 5)

 # 1= 1^3(mod 7)
 # 1= 2^3(mod 7)
 # -1= 3^3(mod 7)
 # 1= 4^3(mod 7)
 # -1= 5^3(mod 7)
 # -1= 6^3(mod 7)

 # 1= 1^3(mod 11)
 # 8= 2^3(mod 11)
 # 5= 3^3(mod 11)
 # 9= 4^3(mod 11)
 # 4= 5^3(mod 11)
 # 7= 6^3(mod 11)
 # 2= 7^3(mod 11)
 # 6= 8^3(mod 11)
 # 3= 9^3(mod 11)
 # 10= 10^3(mod 11)
 
 # 1= 1^3(mod 13)
 # 8= 2^3(mod 13)
 # 1= 3^3(mod 13)
 # -1= 4^3(mod 13)
 # 8= 5^3(mod 13)
 # 8= 6^3(mod 13)
 # 5= 7^3(mod 13)
 # 5= 8^3(mod 13)
 # 1= 9^3(mod 13)
 # -1= 10^3(mod 13)
 # 5= 11^3(mod 13)
 # -1= 12^3(mod 13)

# b
print a(19)
a1 = 2,b1 = 4
a2 = 3,b2 = 5

# c
结论：若p=2（mod 3），1～（p-1）都是p的三次剩余。
考虑1^3, 2^3, ..., (p-1)^3 | (mod p)
显然，结果区间是[1,p-1], 若能证明两两不同，则结果得证。
比较任意两个数属于[1,p-1],
假设a^3 = b^3(mod p)
a^3 - b^3 = (a-b)(a^2+b^2+ab)
若a^3 = b^3(mod p) => a^3 - b^3 =pr(r为任意整数)
=> (a-b)(a^2+b^2+ab) =pr 
=> (a^2+b^2+ab) = pr1(r1为整数)
a(mod 3) = 0|1|2
b(mod 3) = 0|1|2
排列组合是
（0,0）(a^2+b^2+ab)(mod 3) = 0
（0,1）(a^2+b^2+ab)(mod 3) = 1
（0,2）(a^2+b^2+ab)(mod 3) = 1
（1,0）(a^2+b^2+ab)(mod 3) = 1
（1,1）(a^2+b^2+ab)(mod 3) = 0
（1,2）(a^2+b^2+ab)(mod 3) = 1
（2,0）(a^2+b^2+ab)(mod 3) = 1
（2,1）(a^2+b^2+ab)(mod 3) = 1
（2,2）(a^2+b^2+ab)(mod 3) = 0
由以上可知，没有一个式子等于2,所以可得a^3 ！= b^3(mod p)，所以两两不同，得证。




